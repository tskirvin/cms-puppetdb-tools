#!/usr/bin/python3

#########################################################################
### Declarations ########################################################
#########################################################################

import json, puppetdb, re, sys

#########################################################################
### Configuration #######################################################
#########################################################################

## Text for --help
help_text = "query puppetdb to get summary data from all hosts"
usage_text = "usage: %prog [options] [HOSTPATTERN]"

#########################################################################
### Subroutines #########################################################
#########################################################################

def hostManager(): return hostFact('manager')
def hostPrimary(): return hostFact('primary')
def hostSecondary(): return hostFact('secondary')

def hostBackup(opt):
    """
    Looks for hosts with a non-zero value of the 'tibs' fact.  These hosts
    are supposed to be backed up.
    """

    url = puppetdb.generateUrl('facts', opt)
    headers = {'Accept': 'application/json'}

    query = "['and', %s, %s]" % (
        ['=', 'name', 'tibs'],
        ['~', 'value', '.+'],
    )
    try:
        payload = { 'query': json.dumps(eval(query))}
    except SyntaxError:
        raise Exception('Malformed query, check examples for help')

    r = puppetdb.request(url, headers=headers, params=payload)
    if len(r.json()) == 0:
        print("no matches")
        sys.exit(-1)

    backup = {}
    for node in r.json():
        name = node['certname']
        backup[name] = True

    return backup

#########################################################################
### main () #############################################################
#########################################################################

def main():
    p = puppetdb.generateParser(help_text, usage_text)
    opt, args = p.parse_args()

    roles = puppetdb.hostRoles(opt)
    backup = hostBackup(opt)
    primary = puppetdb.hostFact('primary', opt)
    secondary = puppetdb.hostFact('secondary', opt)

    for host in sorted(roles.keys()):
        item = []
        item.append(re.split('\.', host)[0])
        item.append(roles[host])

        bak = 'False'
        if host in backup: bak = 'True'
        item.append(bak)

        p = ['unknown']
        if host in primary:
            p = primary[host].split(',')
        item.append(' '.join(p))

        s = ['unknown']
        if host in secondary:
            s = secondary[host].split(',')
        item.append(' '.join(s))

        print(','.join(item))

    sys.exit(0)

if __name__ == '__main__':
    main()

#########################################################################
### POD Documentation ###################################################
#########################################################################
## We use this to generate man pages.

"""

=head1 NAME

puppetdb-host-csv - generate a CSV of puppet data for use in our twiki

=head1 SYNOPSYS

B<puppetdb-host-csv>

=head1 USAGE

puppetdb-host-csv queries the puppetdb to find a few pieces of data:

=over 2

=item 0. (hostname)

=item 1. The system role

=item 2. Is this system backed up?

=item 3. The system primary

=item 4. The system secondary

=back

The data is then sent to STDOUT as a comma-separated-value list.

Should support both v3 and v4 PuppetDB APIs.

=head1 OPTIONS

=over 4

=item --help

Prints some short help documentation and exits.

=back

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

=head1 COPYRIGHT

Copyright 2014-2020, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.

=cut

"""
