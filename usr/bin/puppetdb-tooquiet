#!/usr/bin/python3

#########################################################################
### Declarations ########################################################
#########################################################################

from datetime import datetime, timedelta
import dateutil.parser, dateutil.tz

import puppetdb, sys

#########################################################################
### Configuration #######################################################
#########################################################################

hours = 24
output_string = "%-30s %23s %23s"

## Text for --help
help_text = "query puppetdb for hosts that are too quiet"
usage_text = "usage: %prog [options] [HOSTPATTERN]"

#########################################################################
### Subroutines #########################################################
#########################################################################

def node_too_old(node, hours):
    """
    Has it been too long since the node has checked in?  Returns True if
    so, False otherwise.

    'node' is a json object; 'hours' is the number of hours that counts
    as "too old".  "Has never checked in" counts as "too long".
    """
    ts = time_from_timestamp(node['report_timestamp'])
    if ts is False: return True

    now = datetime.now(dateutil.tz.tzlocal())
    delta = timedelta(hours=hours)

    diff = now - ts
    if diff > delta: return True
    else:            return False

def node_print(node):
    """
    Create a human-readable string saying how long it's been since a node
    has checked in.
    """
    if 'certname' in node: name = node['certname']
    else:                  name = node['name']

    ts = time_from_timestamp(node['report_timestamp'])
    if ts is False: ts_string = "**no puppetdb records**"
    else:           ts_string = ts.strftime("%Y-%m-%d %H:%M:%S %Z")

    if name in roles: role = roles[name]
    else:             role = 'unknown'

    return output_string % (name, ts_string, role)

def time_from_timestamp(timestamp):
    """
    Parse a timestamp with dateutil.parser.parse(), and set to the local
    timezone.  This is still usable for date math.
    """
    if timestamp is None:
        return False

    ts = dateutil.parser.parse(timestamp)
    local = ts.astimezone(dateutil.tz.tzlocal())
    return local

#########################################################################
### main () #############################################################
#########################################################################

def main():
    p = puppetdb.generateParser(help_text, usage_text)
    p.add_option ('--hours', dest='hours', default=hours, type='int',
        help='how many hours is "too many"?  default: %default')
    opt, args = p.parse_args()

    if len(args) < 1:
        host_search = '.*'
    else:
        host_search = args[0]

    query = "['~', ['fact', 'networking.fqdn'], '^%s$']" % host_search
    nodes = puppetdb.queryNodes(query, opt)

    if len(nodes) == 0:
        sys.exit(0)

    global roles
    roles = puppetdb.hostFact(opt.role_fact, opt)

    items = []
    for node in nodes:
        if node_too_old(node, opt.hours):
            items.append(node_print(node))

    if len(items) > 0:
        for i in sorted(items): print(i)

    sys.exit(0)

if __name__ == '__main__':
    main()

#########################################################################
### POD Documentation ###################################################
#########################################################################
## We use this to generate man pages.

"""

=head1 NAME

puppetdb-tooquiet - list hosts that haven't checked in recently, or at all

=head1 SYNOPSYS

B<puppetdb-tooquiet>

B<puppetdb-tooquiet> --hours 48

B<puppetdb-tooquiet> cmssrv.\*.fnal.gov --hours 0

=head1 USAGE

puppetdb-tooquiet queries the puppetdb to find out which hosts have not
checked in recently (where 'recently' is defined as 48 hours, though this
is configurable).  The list is printed on STDOUT.

Should support both v3 and v4 PuppetDB APIs.

=head1 OPTIONS

=over 4

=item I<HOSTPATTERN>

Default host pattern to match.  Defaults to '.*'; remember that you may
need to escape wild cards if you're using this from the CLI.

=item --hours I<HOURS>

How many hours is too many?  Defaults to 48; set to 0 if you want to list
all hosts and their last checked-in date.

=item --help

Prints some short help documentation and exits.

=back

=head1 TODO

Write a script to send mail based on the contents of this script.

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

Based in part on https://github.com/JHaals/puppetdb-grep

=head1 COPYRIGHT

Copyright 2013-2024, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.

=cut

"""
