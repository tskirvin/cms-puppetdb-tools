#!/usr/bin/python3

#########################################################################
### Declarations ########################################################
#########################################################################

import puppetdb, sys

#########################################################################
### Configuration #######################################################
#########################################################################

## Text for --help
help_text = "query puppetdb for system fact values"
usage_text = "usage: %prog [options] fact_name [VALUE]"

#########################################################################
### Subroutines #########################################################
#########################################################################

def dottedFactValue(facts, fact):
    """
    Pull out the dotted fact value from facts.  I wish puppet would just
    support it better!  Sigh.
    """
    pieces = fact.split('.')
    data = facts
    for i in pieces:
        if i in data:
            data = data[i]
        else: return None
    return data

#########################################################################
### main () #############################################################
#########################################################################

def main():
    p = puppetdb.generateParser(help_text, usage_text)
    p.add_option('--json', dest='json', action='store_true',
        default=False, help="print json instead of the value")
    opt, args = p.parse_args()

    if len(args) < 1 or len(args) > 2:
        p.print_help()
        exit(-1)

    headers = {'Accept': 'application/json'}

    fact = args[0]
    array = []
    if len(fact.split('.')) > 1:
        url = puppetdb.generateUrl('inventory', opt)
        if len(args) == 2:
            data = {'query': '["=", "facts.%s", "%s"]' % (fact, args[1])}
        else:
            data = {}

        try:
            if opt.debug: print("url: %s\ndata: %s" % (url, data))
            r = puppetdb.request(url, headers=headers, data=data)
            for entry in r.json():
                facts = entry['facts']
                certname = entry['certname']
                value = dottedFactValue(facts, fact)
                if value is None:
                    pass
                else:
                    if opt.json:
                        name = entry['certname']
                        j = {
                            'certname': name,
                            'environment': entry['environment'],
                            'name': fact,
                            'value': value
                        }
                        array.append(j)
                    else:
                        array.append("%-35s %-42s" % (certname, value))
        except Exception as e:
            p.error(e)

    else:
        url = puppetdb.generateUrl('facts', opt, *args)
        data = {}
        try:
            if opt.debug: print("url: %s" % url)
            r = puppetdb.request(url, headers=headers)
            for node in r.json():
                if opt.json:
                    array.append(node)
                else:
                    certname = node['certname']
                    value = node['value']
                    array.append("%-35s %-42s" % (certname, value))
        except Exception as e:
            p.error(e)

    if opt.json:
        import json
        print(json.dumps(array, indent=4))
    else:
        print("\n".join(array))

    sys.exit(0)

if __name__ == '__main__':
    main()

#########################################################################
### POD Documentation ###################################################
#########################################################################
## We use this to generate man pages.

"""

=head1 NAME

puppetdb-fact - query the puppetdb about a given fact

=head1 SYNOPSYS

B<puppetdb-fact> kernelrelease

B<puppetdb-fact> kernelrelease 2.6.32-431.17.1.el6.x86_64

=head1 USAGE

puppetdb-fact queries the puppetdb facts or inventory endpoint to find the
values of the given fact on all nodes; additionally, we can filter by a
given value (no wildcards).

We decide which endpoint we're using based on the existance of dots in the
fact query; the facts endpoint doesn't support dots but is generally a
more specifically useful endpoint for this work, while the inventory
endpoint is more general and supports dotted fact paths but is much
slower.

Outputs a list on STDOUT containing the hostname and the fact value.

Should support both v3 and v4 PuppetDB APIs.

=head1 OPTIONS

=over 4

=item I<fact>

Fact name.  Required.  No wildcards allowed.

=item I<value>

Fact value.  Optional; if not offered, we won't restrict the search
further.

=item --help

Prints some short help documentation and exits.

=item --json

Prints the output as json instead of text.

=back

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

=head1 COPYRIGHT

Copyright 2016-2024, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.

=cut

"""
