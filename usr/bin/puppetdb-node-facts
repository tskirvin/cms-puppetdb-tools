#!/usr/bin/python3

#########################################################################
### Declarations ########################################################
#########################################################################

import json, puppetdb, sys

#########################################################################
### Configuration #######################################################
#########################################################################

output_string = "%-25s %s: %s"

## Text for --help
help_text = "query puppetdb for facts from matching hosts"
usage_text = "usage: %prog [HOSTPATTERN]"

#########################################################################
### Subroutines #########################################################
#########################################################################

def node_facts(node, opt):
    """
    """

    url = puppetdb.generateUrl('nodes', opt, node, 'facts')
    headers = {'Accept': 'application/json'}

    if opt.debug: print("url: %s\n" % url)
    try:
        r = puppetdb.request(url, headers=headers)
    except Exception as e:
        raise Exception('%s (bad url?: %s)' % (e, url))

    facts = {}
    for fact in r.json():
        name = fact['name']
        facts[name] = fact['value']

    return facts

#########################################################################
### main () #############################################################
#########################################################################

def main():
    p = puppetdb.generateParser(help_text, usage_text)
    p.add_option('--json', dest='json', action='store_true',
        default=False, help="print json instead of the value")
    opt, args = p.parse_args()

    if len(args) < 1: host_search = '.*'
    else:             host_search = args[0]

    query = "['~', 'certname', '^%s$']" % host_search
    try:
        payload = {'query': json.dumps(eval(query))}
    except SyntaxError:
        p.error('Malformed query, check examples for help')

    headers = {'Accept': 'application/json'}
    url = puppetdb.generateUrl('nodes', opt)

    if opt.debug: print("url: %s\npayload: %s" % (url, payload))
    try:
        r = puppetdb.request(url, headers=headers, params=payload)
    except Exception as e:
        p.error('%s (bad json?: %s)' % (e, payload))

    if len(r.json()) == 0:
        print("no matches")
        sys.exit(-1)

    output = []
    for node in r.json():
        if opt.api_version < 4: name = node['name']
        else:                   name = node['certname']
        facts = node_facts(name, opt)
        if opt.json:
            output.append(facts)
        else:
            for fact in list(facts.keys()):
                string = output_string % (name, fact, facts[fact])
                print(string)

    if opt.json:
        print(json.dumps(output, sort_keys=True, indent=4))

    sys.exit(0)

if __name__ == '__main__':
    main()

#########################################################################
### POD Documentation ###################################################
#########################################################################
## We use this to generate man pages.

"""

=head1 NAME

puppetdb-node-facts - list facts on a per-host basis

=head1 SYNOPSYS

B<puppetdb-node-facts> cmssrv167.fnal.gov

B<puppetdb-node-facts> cmssrv'.*'

B<puppetdb-node-facts>

=head1 USAGE

puppetdb-node-facts queries the puppetdb to discover facts about all
matching hosts.  These facts are printed to stdout.

Should support both v3 and v4 PuppetDB APIs.

=head1 OPTIONS

=over 4

=item I<HOSTPATTERN>

Default host pattern to match.  Defaults to '.*'; remember that you may
need to escape wild cards if you're using this from the CLI.

=item --help

Prints some short help documentation and exits.

=item --json

Prints the output as json instead of text.

=back

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

=head1 COPYRIGHT

Copyright 2013-2020, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.

=cut

"""
