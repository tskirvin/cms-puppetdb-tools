#!/usr/bin/python3
"""
Queries the puppetdb 'resources' endpoint to list matching resources of a
given class ('File', 'Firewall').
"""

#########################################################################
### Declarations ########################################################
#########################################################################

import json, puppetdb, sys

#########################################################################
### Configuration #######################################################
#########################################################################

## Text for --help
help_text = "query puppetdb resources endpoint"
usage_text = "usage: %prog [options] Class"

#########################################################################
### Subroutines #########################################################
#########################################################################

def queryResourcesPuppetDb(type, opt):
    """
    Query the puppetdb resources endpoint.  Type 'type' is required, and
    should have the first letter upper-case (matching the puppet internals).
    Hash data can have:

       hostname     Only match on this hostname.  Can include wildcards.
       match        Only match if the title of the resource matches this
                    regex.

    Returns an array of matching json entries.
    """

    fields = []
    fields.append("['=', 'type', '%s']" % type)
    if opt.hostname:
        fields.append("['~', 'certname', '^%s$' ]" % opt.hostname)
    if opt.match:
        fields.append("['~', 'title', '^%s$' ]" % opt.match)
    query = "['and', %s]" % (', '.join(fields))

    try:
        payload = {'query': json.dumps(eval(query))}
    except SyntaxError:
        print('Malformed query: %s' % query)
        return {}

    headers = {'Accept': 'application/json'}
    try:
        url = puppetdb.generateUrl('resources', opt)
        if opt.debug:
            print("url: %s" % url)
            print("query: %s" % payload)
        r = puppetdb.request(url, headers=headers, params=payload)
    except Exception as e:
        print('%s (bad json?: %s)' % (e, payload))
        raise(e)

    if len(r.json()) == 0:
        return []

    nodes = []
    for node in r.json():
        nodes.append(node)

    return nodes

#########################################################################
### main () #############################################################
#########################################################################

def main():
    p = puppetdb.generateParser(help_text, usage_text)
    p.add_option('--hostname', dest='hostname', default=None,
        help="hostname to query (default: all hosts)")
    p.add_option('--match', dest='match', default=None,
        help="resource title to match (default: None)")
    opt, args = p.parse_args()

    if len(args) < 1:
        p.print_help()
        exit(-1)

    classname = args[0]

    try:
        nodes = queryResourcesPuppetDb(classname, opt)
        if not nodes:
            print(json.dumps([]))
        else:
            print(json.dumps(nodes, sort_keys=True, indent=4))
    except Exception as e:
        print("error: %s" % e)
        sys.exit(-1)

    sys.exit(0)

if __name__ == '__main__':
    main()

#########################################################################
### POD Documentation ###################################################
#########################################################################
## We use this to generate man pages.

"""

=head1 NAME

puppetdb-resources - query puppetdb by resource

=head1 SYNOPSYS

B<puppetdb-resources> Firewall

B<puppetdb-resources> Class --match Mysql::Server

B<puppetdb-resources> User --match tskirvin --hostname 'cms.\*'

=head1 USAGE

puppetdb-resources queries the central puppetdb resources type.  This can
be used to find, for instance, which hosts have a certain class deployed,
or which servers are managing a specific user.

Output is JSON.

Should support both v3 and v4 PuppetDB APIs.

=head1 OPTIONS

=over 4

=item I<CLASS>

Which resource class are we querying?  Required.  Note that this must
match the standard puppet internal naming scheme, so you will search for
(e.g.) 'File' instead of 'file' and 'Foo::Bar' instead of "foo::bar".

=item --debug

Prints debugging information on STDOUT as we run.

=item --help

Prints some short help documentation and exits.

=item --hostname I<HOSTNAME>

Only match on the given I<HOSTNAME>, instead of all hosts.  This can
include wild cards.

=item --match I<MATCH>

Only match if the resource title matches I<MATCH>.  This can include wild
cards.

=item --server I<URL>

What server are we querying?  Set in the main json configuration file.
An example value would be F<http://puppetdb:8080>.

=item --url_base I<URL_BASE>

Defines the query base relative to the main server URL.  Set in the main
json configuration, defaults to F</v3/resources>.

=back

=head1 EXAMPLE

    puppetdb-resources Class --match Mysql::Server

If you're just looking for matching hostnames:

    puppetdb-resources Class --match Mysql::Server | grep certname

=head1 TODO

Add support to query by parameters as well.

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

=head1 COPYRIGHT

Copyright 2015-2020, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.

=cut

"""
